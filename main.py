import pyodbc
import telegram
import datetime
import pytz
from telegram.ext import Updater, CommandHandler


bot = telegram.Bot(token='6049300937:AAGnDwH5rLyr4NhQxisF9goiYpH0b-sTFlA')
local_tz = pytz.timezone('Europe/Chisinau')
connection = pyodbc.connect('DRIVER={SQL Server Native Client 11.0};'
                            'SERVER=ENXYZT;'
                            'DATABASE=master;'
                            'TRUSTED_CONNECTION=yes;')

def start(update, context):
    reply_markup = {
        'keyboard': [['/now', '/next'], ['/today', '/tomorrow'], ['/week']],
        'one_time_keyboard': False,
        'resize_keyboard': True
    }
    bot.send_message(chat_id=update.effective_chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã
def get_current_subject():
    cursor = connection.cursor()
    query = "SELECT TOP 1 time_start, time_end, subject, subject_type, teacher, classroom  FROM schedule WHERE day = " \
            "? AND time_start <= ? AND time_end " \
            "> ? ORDER BY time_start "
    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_day = datetime.datetime.now().strftime('%A').lower()
    current_time = datetime.datetime.now().strftime('%H:%M:%S')
    cursor.execute(query, (current_day, current_time, current_time))
    row = cursor.fetchone()
    # –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
    if row:
        time_start = row[0].strftime("%H:%M")
        time_end = row[1].strftime("%H:%M")
        return f"‚ùó{time_start} - {time_end}‚ùó {row[2]} | {row[3]} | {row[4]} | {row[5]}\n\n"
    else:
        # –∏–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–∞, –∏ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        query = "SELECT TOP 1 time_start FROM schedule WHERE day = ? AND time_start > ? ORDER BY time_start"
        cursor.execute(query, (current_day, current_time))
        row = cursor.fetchone()
        if row:
            time_until_next_subject = datetime.datetime.strptime(row[0].strftime('%H:%M:%S'), '%H:%M:%S') - datetime. \
                datetime.strptime(current_time, '%H:%M:%S')
            minutes_until_next_subject = int(time_until_next_subject.total_seconds() // 60)
            return f"–°–µ–π—á–∞—Å –ø–µ—Ä–µ–º–µ–Ω–∞, —Å–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ —á–µ—Ä–µ–∑ {minutes_until_next_subject} –º–∏–Ω—É—Ç"
        else:
            return "–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–∞—Ä"


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /now
def handle_now(update, context):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã
    current_subject = get_current_subject()

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(chat_id=update.effective_chat.id, text=current_subject)


def get_next_subject():
    cursor = connection.cursor()
    query = "SELECT TOP 1 time_start, time_end, subject, subject_type, teacher, classroom FROM schedule WHERE day = ? " \
            "AND time_start > ? ORDER BY time_start "
    current_day = datetime.datetime.now().strftime('%A').lower()
    current_time = datetime.datetime.now().strftime('%H:%M:%S')
    cursor.execute(query, (current_day, current_time))
    row = cursor.fetchone()
    if row:
        time_start = row[0].strftime("%H:%M")
        time_end = row[1].strftime("%H:%M")
        return f"‚ùó{time_start} - {time_end}‚ùó {row[2]} | {row[3]} | {row[4]} | {row[5]}\n\n"
    else:
        return "–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–∞—Ä"


def handle_next(update, context):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã
    next_subject = get_next_subject()

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(chat_id=update.effective_chat.id, text=next_subject)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
def get_today_schedule():
    cursor = connection.cursor()
    query = "SELECT time_start, time_end, subject, subject_type, teacher, classroom, week_type FROM schedule WHERE day = ? ORDER " \
            "BY time_start "
    current_day = datetime.datetime.now().strftime('%A').lower()
    cursor.execute(query, (current_day,))
    rows = cursor.fetchall()
    # –µ—Å–ª–∏ –ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –µ—Å—Ç—å, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∏–º–∏
    if rows:
        schedule_string = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        for row in rows:
            time_start = row[0].strftime("%H:%M")
            time_end = row[1].strftime("%H:%M")
            schedule_string += f"‚ùó{time_start} - {time_end}‚ùó {row[2]} | {row[3]} | {row[4]} | {row[5]} | {row[6]}\n\n"
        return schedule_string
    else:
        return "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç"


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /today
def handle_today(update, context):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    today_schedule = get_today_schedule()

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(chat_id=update.effective_chat.id, text=today_schedule)


def get_tomorrow_schedule():
    cursor = connection.cursor()
    query = "SELECT time_start, time_end, subject, subject_type, teacher, classroom FROM schedule WHERE day = ? ORDER " \
            "BY time_start "
    tomorrow = datetime.datetime.today() + datetime.timedelta(days=1)
    tomorrow_str = tomorrow.strftime('%A').lower()
    cursor.execute(query, (tomorrow_str,))
    rows = cursor.fetchall()
    if rows:
        schedule_str = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {tomorrow.strftime('%d.%m.%Y')}:\n"
        for row in rows:
            time_start = row[0].strftime("%H:%M")
            time_end = row[1].strftime("%H:%M")
            schedule_str += f"‚ùó{time_start} - {time_end}‚ùó {row[2]} | {row[3]} | {row[4]} | {row[5]}\n\n"
        return schedule_str
    else:
        return "–ó–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –ø–∞—Ä"


def handle_tomorrow(update, context):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    tomorrow_schedule = get_tomorrow_schedule()

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(chat_id=update.effective_chat.id, text=tomorrow_schedule)


def get_week_schedule():
    cursor = connection.cursor()
    query = "SELECT day, time_start, time_end, subject, subject_type, teacher, classroom, week_type FROM schedule ORDER BY day, " \
            "time_start "
    cursor.execute(query)
    rows = cursor.fetchall()
    # –µ—Å–ª–∏ –ø–∞—Ä—ã –µ—Å—Ç—å –≤ –ë–î
    if rows:
        schedule_string = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é:\n"
        current_day = None
        for row in rows:
            # –µ—Å–ª–∏ —Å–º–µ–Ω–∏–ª—Å—è –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if row[0] != current_day:
                current_day = row[0]
                schedule_string += f"\nüóìÔ∏è {current_day.capitalize()}:\n"
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä–µ
            time_start = row[1].strftime("%H:%M")
            time_end = row[2].strftime("%H:%M")
            schedule_string += f"‚ùó{time_start} - {time_end} | {row[3]} | {row[4]} | {row[5]} | {row[6]} | {row[7]}\n\n"
        return schedule_string
    else:
        return "–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é"


def handle_week(update, context):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
    week_schedule = get_week_schedule()

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(chat_id=update.effective_chat.id, text=week_schedule)



# –∑–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
updater = telegram.ext.Updater(token='6049300937:AAGnDwH5rLyr4NhQxisF9goiYpH0b-sTFlA', use_context=True)
updater.dispatcher.add_handler(CommandHandler('start', start))
updater.dispatcher.add_handler(CommandHandler('now', handle_now))
updater.dispatcher.add_handler(CommandHandler('next', handle_next))
updater.dispatcher.add_handler(CommandHandler('today', handle_today))
updater.dispatcher.add_handler(CommandHandler('tomorrow', handle_tomorrow))
updater.dispatcher.add_handler(CommandHandler('week', handle_week))
updater.start_polling()
updater.idle()

#

#
# cursor = connection.cursor()
# cursor.execute('Select * from schedule')
# for row in cursor:
#     print('row = %r' %(row,))


# #
# # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å
# def get_schedule(day):
#     with connection.cursor() as cursor:
#         # –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å
#         query = "SELECT * FROM schedule WHERE day=%s"
#         cursor.execute(query, (day,))
#         result = cursor.fetchall()
#
#         # —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
#         schedule_text = ''
#         for item in result:
#             schedule_text += f'{item["time_start"]} - {item["time_end"]}: {item["subject"]}\n'
#
#         return schedule_text
#
# # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
# def get_next_subject():
#     with connection.cursor() as cursor:
#         # –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
#         query = "SELECT * FROM schedule WHERE day=%s AND time_start > %s ORDER BY time_start LIMIT 1"
#         cursor.execute(query, (datetime.now().strftime('%A'), datetime.now().strftime('%H:%M')))
#         result = cursor.fetchone()
#
#         # —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
#         next_subject = f'{result["time_start"]} - {result["time_end"]}: {result["subject"]}'
#         return next_subject
#
#
# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
# elif message_text.startswith('/next'):
#     # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
#     next_subject = get_next_subject()
#
#     # –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     bot.send_message(chat_id=update.effective_chat.id, text=next_subject)
#


# def get_schedule_for_day(day):
#     cursor = connection.cursor()
#     query = "SELECT time_start, time_end, subject, classroom FROM schedule WHERE day = ? ORDER BY time_start"
#     cursor.execute(query, day)
#     rows = cursor.fetchall()
#     schedule = ''
#     for row in rows:
#         schedule += f"{row[0]} - {row[1]} | {row[2]} | {row[3]}\n\n"
#     return schedule

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# def handle_message(update, context):
#     # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     message_text = update.message.text.lower()
#
#     # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å
#     if message_text.startswith('/schedule'):
#         try:
#             # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
#             day = message_text.split(' ')[1]
#
#             # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å
#             schedule = get_schedule_for_day(day)
#
#             # –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#             bot.send_message(chat_id=update.effective_chat.id, text=schedule)
#         except:
#             bot.send_message(chat_id=update.effective_chat.id,
#                              text="–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É.")
#
#
# updater.dispatcher.add_handler(telegram.ext.MessageHandler(telegram.ext.Filters.text, handle_message))
